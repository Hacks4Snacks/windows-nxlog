# Configuration for configuring NXLog to forward Windows logs to a SIEM
# NXLog Config

define ROOT C:\Program Files (x86)\nxlog
define OUTPUT_DESTINATION_ADDRESS <SIEMIP>
define OUTPUT_DESTINATION_PORT 514

Moduledir %ROOT%\modules
CacheDir %ROOT%\data
Pidfile %ROOT%\data\nxlog.pid
SpoolDir %ROOT%\data
LogFile %ROOT%\data\nxlog.log

<Extension json>
Module xm_json
</Extension>

<Extension syslog>
Module xm_syslog
</Extension>


############################################################################
####                      NXLOG WITHOUT PATTERNDB                      #####
############################################################################

#WIN<Input internal>
#WIN    Module      im_internal
#WIN</Input>

#WIN<Input eventlog>
#WIN    Module      im_msvistalog
#WIN    Query       <QueryList>\
#WIN                    <Query Id="0">\
#WIN                        <Select Path="Application">*</Select>\
#WIN                        <Select Path="System">*</Select>\
#WIN                        <Select Path="Security">*</Select>\
#SYSM                        <Select Path="Microsoft-Windows-Sysmon/Operational">*</Select>\
#WIN                    </Query>\
#WIN                </QueryList>
#WIN    Exec if ($EventID == 5156) OR ($EventID == 5158) drop();
#WIN</Input>


#WIN<Output out>

#WIN 	Module      om_udp
#WIN    %OUTPUT_DESTINATION_ADDRESS%
#WIN    %OUTPUT_DESTINATION_PORT%
#WIN    $EventTime = integer($EventTime) / 1000000;
#WIN    $EventReceivedTime = integer($EventReceivedTime) / 1000000;
#WIN    $Message = to_json(); to_syslog_bsd();

#WIN</Output>

#WIN<Route 1>
#WIN Path 	eventlog, internal => out
#WIN</Route>

############################################################################
#####                     /NXLOG WITHOUT PATTERNDB                     #####
############################################################################

############################################################################
####                             IIS-NXLOG                             #####
############################################################################

#IIS<Extension w3c>
#IIS  Module xm_csv
#IIS   Fields $date, $time, $s_ip, $cs_method, $cs_uri_stem, $cs_uri_query, $s_port, $cs_username, $c_ip, $cs_User_Agent, $cs_Referer, $sc_status, $sc_substatus, $sc_win32_status, $time_taken
#IIS   FieldTypes string, string, string, string, string, string, integer, string, string, string, string, integer, integer, integer, integer
#IIS   Delimiter ' '
#IIS</Extension>

#IIS<Input IIS_Logs>
#IIS   Module im_file
#IIS   File "C:\\inetpub\\logs\\LogFiles\\W3SVC1\\u_ex*"
#IIS   SavePos TRUE
#IIS   Exec if $raw_event =~ /^#/ drop(); \
#IIS   else \
#IIS   { \
#IIS   w3c->parse_csv(); \
#IIS   $EventTime = parsedate($date + " " + $time); \
#IIS   $SourceName = "IIS"; \
#IIS   }
#IIS</Input>

#IIS<Output IIS_Route>
#IIS   Module om_udp
#IIS   Host %OUTPUT_DESTINATION_ADDRESS%
#IIS   Port %OUTPUT_DESTINATION_PORT%
#IIS   Exec $EventTime = strftime($EventTime, '%Y-%m-%d %H:%M:%S');
#IIS   Exec $Message = to_json(); to_syslog_bsd();
#IIS</Output>

#IIS<Route IIS>
#IIS Path  IIS_Logs => IIS_Route
#IIS</Route>

############################################################################
#####                     		/IIS-NXLOG		       #####
############################################################################

#######################################################################################################
####                                      IIS-NXLOG-Extended                                      #####
#### NOTE: USE THIS CONF FOR IIS LOGS WITH CS-HOST, SC-BYTES, CS-BYTES AND X-FORWARDED-FOR FIELDS #####
#######################################################################################################

#IIE <Extension IIS_w3c_extended>
#IIE  Module xm_csv
#IIE  Fields $date, $time, $s_ip, $cs_method, $cs_uri_stem, $cs_uri_query, $s_port, $cs_username, $c_ip, $cs_User_Agent, $cs_Referer, $cs_host, $sc_status, $sc_substatus, $sc_win32_status, $sc_bytes, $cs_bytes, $time_taken, $x-forwarded-for
#IIE  FieldTypes string, string, string, string, string, string, integer, string, string, string, string, string, integer, integer, integer, integer, integer,integer, string
#IIE  Delimiter ' '
#IIE</Extension>

#IIE<Input IIS_Extended_IN>
#IIE  Module im_file
#IIE  File "C:\\inetpub\\logs\\LogFiles\\W3SVC1\\u_ex*"
#IIE  SavePos TRUE
#IIE  Exec if $raw_event =~ /^#/ drop(); \
#IIE  else \
#IIE  { \
#IIE    IIS_w3c_extended->parse_csv(); \
#IIE    $EventTime = parsedate($date + " " + $time); \
#IIE    $SourceName = "IIS"; \
#IIE  }
#IIE</Input>

#IIE<Output IIS_Extended_OUT>
#IIE  Module om_udp
#IIE  Host %OUTPUT_DESTINATION_ADDRESS%
#IIE  Port %OUTPUT_DESTINATION_PORT%
#IIE  Exec $EventTime = strftime($EventTime, '%Y-%m-%d %H:%M:%S');
#IIE  Exec $Message = to_json(); to_syslog_bsd();
#IIE</Output>

#IIE<Route IIS_Extended_Route>
#IIE  Path	IIS_Extended_IN => IIS_Extended_OUT
#IIE</Route>

############################################################################
#####                    /IIS-NXLOG-Extended                           #####
############################################################################

############################################################################
####                          WINDOWS-FW-NXLOG                         #####
############################################################################

#WFW<Extension transform_alienvault_csv_windows_firewall>
#WFW    Module          xm_csv
#WFW    Fields          date, time, action, protocol, src-ip, dst-ip, src-port, dst-port, size, tcpflags, tcpsyn, tcpack, tcpwin, icmptype, icmpcode, info, path
#WFW    FieldTypes      string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
#WFW    Delimiter       ' '
#WFW</Extension>

#WFW<Input WINDOWS-FW>
#WFW    Module      im_file
#WFW    File        "C:\\Windows\\System32\\LogFiles\\Firewall\\pfirewall.log"
#WFW   SavePos     TRUE
#WFW   InputType   LineBased
#WFW      Exec if $raw_event =~ /^#/ drop();\
#WFW      else\
#WFW       {\
#WFW               transform_alienvault_csv_windows_firewall->parse_csv();\
#WFW               $EventTime = parsedate($date + " " + $time); \
#WFW               $Message = $raw_event; \
#WFW               $SourceName = "WINDOWS-FW";\
#WFW       }
#WFW</Input>

#WFW<Output FW_OUT>
#WFW   Module om_udp
#WFW   Host %OUTPUT_DESTINATION_ADDRESS%
#WFW   Port %OUTPUT_DESTINATION_PORT%
#WFW   Exec $EventTime = strftime($EventTime, '%Y-%m-%d %H:%M:%S, %z');
#WFW   Exec $Message = to_json(); to_syslog_bsd();
#WFW</Output>

#WFW<Route route_windows_fw_nxlog>
#WFW    Path        WINDOWS-FW => FW_OUT
#WFW</Route>

############################################################################
####                          /WINDOWS-FW-NXLOG                        #####
############################################################################

############################################################################
####                         DHCP-NXLOG                                #####
############################################################################

#DHCP<Extension transform_alienvault_dhcp_csv>
#DHCP    Module          xm_csv
#DHCP    Fields          $EventReceivedTime, $Message
#DHCP    FieldTypes      string, string
#DHCP    Delimiter       ;
#DHCP</Extension>

#DHCP<Input DHCP_IN>
#DHCP    Module      im_file
#DHCP    File        "C:\\Windows\\Sysnative\\dhcp\\DhcpSrvLog-*.log"
#DHCP    SavePos     TRUE
#DHCP    InputType   LineBased
#DHCP    Exec        if $raw_event =~ /^[0-3][0-9],/\
#DHCP                {\
#DHCP                      $Message = $raw_event;\
#DHCP                      if $Message =~ s/^00/1000/;\
#DHCP                      $raw_event = to_json();\
#DHCP                      $SourceName = "DHCP-NXLOG";\
#DHCP                }\
#DHCP                else\
#DHCP                      drop();
#DHCP</Input>

#DHCP<Output DHCP_OUT>
#DHCP    Module      om_udp
#DHCP    Host        %OUTPUT_DESTINATION_ADDRESS%
#DHCP    Port        %OUTPUT_DESTINATION_PORT%
#DHCP    Exec        $Hostname = hostname_fqdn();
#DHCP    Exec        transform_alienvault_dhcp_csv->to_csv(); to_syslog_bsd();
#DHCP</Output>

#DHCP<Route DHCP>
#DHCP    Path DHCP_IN => DHCP_OUT
#DHCP</Route>

############################################################################
####                         /DHCP-NXLOG                               #####
############################################################################

############################################################################
####                          DNS-NXLOG                                #####
############################################################################

#DNS<Input DNS_IN>
#DNS   Module    im_file
#DNS   File    "C:\\Windows\\Sysnative\\dns\\dns.log"
#DNS   SavePos  TRUE
#DNS   InputType LineBased
#DNS   Exec if ($raw_event =~ /^#/) OR ($raw_event == '') drop();\
#DNS       else\
#DNS           {\
#DNS           $Message = $raw_event;\
#DNS           $SourceName = "DNS";\
#DNS           $raw_event = to_json();\
#DNS           }
#DNS</Input>

#DNS<Output DNS_OUT>
#DNS   Module          om_udp
#DNS   Host            %OUTPUT_DESTINATION_ADDRESS%
#DNS   Port            %OUTPUT_DESTINATION_PORT%
#DNS   Exec            if not defined $Message { drop(); }
#DNS   Exec            $Message = replace($Message, "a.m.", "AM");
#DNS   Exec            $Message = replace($Message, "p.m.", "PM");

#DNS   Exec            $Message = replace($Message, "\t", " "); $Message = replace($Message, "\n", " "); $Message = replace($Message, "\r", " ");

#DNS   Exec            if not defined $AccountName { $AccountName = "-"; }
#DNS   Exec            if not defined $AccountType { $AccountType = "-"; }
#DNS   Exec            if not defined $Domain { $Domain = "-"; }

#DNS   Exec	    	      $Hostname = hostname_fqdn();
#DNS   Exec            $raw_event = $Hostname + ' DNS-NXLOG: ' + $raw_event;
#DNS   Exec            $Message = to_json(); to_syslog_bsd();
#DNS</Output>

#DNS<Route route_dns_nxlog>
#DNS   Path        DNS_IN => DNS_OUT
#DNS</Route>

############################################################################
####                          /DNS-NXLOG                               #####
############################################################################

############################################################################
####                       EXCHANGE-NXLOG                              #####
############################################################################

#EXCH<Extension transform_alienvault_csv_exchange>
#EXCH    Module         	xm_csv
#EXCH    Fields	    	    date_time, client_ip, client_hostname, server_ip, server_hostname, source_context, connector_id, source, event_id, internal_message_id, message_id, network_message_id, recipient_address, recipient_status, total_bytes, recipient_count, related_recipient_address, reference, message_subject, sender_address, return_path, message_info, directionality, tenant_id, original_client_ip, original_server_ip, custom_data, transport_traffic_type, log_id, schema_version
#EXCH    FieldTypes 		string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
#EXCH    Delimiter      	,
#EXCH</Extension>

#EXCH<Input EXCHANGE_IN>

#EXCH    Module      im_file
# Modify the file path if it is needed
#EXCH    File        "C:\\Program Files\\Microsoft\\Exchange Server\\V15\\TransportRoles\\Logs\\MessageTracking\\MSGTRK????????*-*.log"
#EXCH    SavePos     TRUE
#EXCH    Exec if ($raw_event =~ /^#/) OR ($raw_event =~ /HealthMailbox/) drop();\
#EXCH    else\
#EXCH    {\
#EXCH    transform_alienvault_csv_exchange->parse_csv();\
#EXCH    $Message = $raw_event;\
#EXCH    $SourceName = "EXCHANGE-NXLOG";\
#EXCH    }
#EXCH</Input>

#EXCH<Output EXCHANGE_OUT>

#EXCH    Module      om_udp
#EXCH    Host        %OUTPUT_DESTINATION_ADDRESS%
#EXCH    Port        %OUTPUT_DESTINATION_PORT%
#EXCH    $EventTime = integer($EventTime) / 1000000;
#EXCH    $EventReceivedTime = integer($EventReceivedTime) / 1000000;
#EXCH    Exec $Message = to_json(); to_syslog_bsd();

#EXCH</Output>

#EXCH<Route EXCHANGE>

#EXCH    Path EXCHANGE_IN => EXCHANGE_OUT

#EXCH</Route>

############################################################################
####                       /EXCHANGE-NXLOG                             #####
############################################################################

######################################################################################
####                                 MSSQL-NXLOG                                 #####
####  The audit mssql logs must be added to Application when enabling auditing.  #####
######################################################################################

#SQL<Input MSSQL_IN>
#SQL    Module          im_msvistalog
#SQL    SavePos         FALSE
#SQL    ReadFromLast    TRUE

#SQL    Query          <QueryList>                                         \
#SQL                   <Query Id="0">                                  \
#SQL                       <Select Path="Application">*[System[(EventID='33205')]]</Select>\
#SQL                   </Query>                                    \
#SQL               </QueryList>
#SQL    Exec			$Message = $raw_event;
#SQL    Exec           if $raw_event =~ /^#/ drop();\
#SQL               else\
#SQL               {\
#SQL                   $SourceName = "MSSQL-NXLOG";\
#SQL               }

#SQL    Exec			 if $raw_event =~ /action_id:(\S+)/ $Action_ID = $1;
#SQL    Exec			 if $raw_event =~ /database_name:(\S+)/ $DataBase = $1;
#SQL    Exec			 if $raw_event =~ /server_instance_name:(\S+)/ $SV_Instace = $1;
#SQL    Exec			 if $raw_event =~ /session_server_principal_name:(\S+)/ $User = $1;
#SQL    Exec			 if $raw_event =~ /AUDIT_SUCCESS/\
#SQL    {\
#SQL    $Result = 'Success';\
#SQL    }\
#SQL    else\
#SQL    $Result = 'Failure';
#SQL    Exec            $Message = replace($Message, "\t", " "); $Message = replace($Message, "\n", " "); $Message = replace($Message, "\r", " ");
#SQL</Input>

#SQL<Output MSSQL_OUT>
#SQL    Module          om_udp
#SQL    Host            %OUTPUT_DESTINATION_ADDRESS%
#SQL    Port            %OUTPUT_DESTINATION_PORT%
#SQL    $EventTime = integer($EventTime) / 1000000;
#SQL    $EventReceivedTime = integer($EventReceivedTime) / 1000000;
#SQL    Exec 			$Message = to_json(); to_syslog_bsd();

#SQL</Output>


#SQL<Route mssql>
#SQL    Path            MSSQL_IN => MSSQL_OUT
#SQL</Route>

######################################################################################
####                                 /MSSQL-NXLOG                                #####
####  The audit mssql logs must be added to Application when enabling auditing.  #####
######################################################################################

############################################################################
####                         NPS-NXLOG                                 #####
####    Use "system32" for LogFiles Log location on 32 Bit systems     #####
############################################################################
#NPS<Extension xmlparser>
#NPS Module xm_xml
#NPS</Extension>

#NPS<Input NPS_IN>
#NPS  Module im_file
#NPS  File "C:\\Windows\\Sysnative\\LogFiles\\IN*.log"
#NPS  SavePos TRUE
#NPS  InputType LineBased
#NPS  Exec if ($raw_event =~ /^#/) OR ($raw_event == '') drop();\
#NPS  else\
#NPS  {\
#NPS    parse_xml();\
#NPS    $Message = $raw_event;\
#NPS    $SourceName = "NPS-NXLOG";\
#NPS    $raw_event = to_json();\
#NPS  }
#NPS</Input>

#NPS<Output NPS_OUT>
#NPS  Module om_udp
#NPS  Host %OUTPUT_DESTINATION_ADDRESS%
#NPS  Port %OUTPUT_DESTINATION_PORT%
#NPS  Exec $Hostname = hostname_fqdn();
#NPS  Exec $Message = replace($Message, '"', "");
#NPS  Exec $Message = to_json(); to_syslog_bsd();
#NPS</Output>

#NPS<Route NPS>
#NPS  Path NPS_IN => NPS_OUT
#NPS</Route>

#######################################################################
####                        /NPS-NXLOG                            #####
#######################################################################

#######################################################################
####                        SHAREPOINT-NXLOG                      #####
#######################################################################
#SHARE<Extension transform_alienvault_csv_sharepoint>
#SHARE    Module      xm_csv
#SHARE    Fields      $Timestamp, $Process, $TID, $Area, $Category, $EventID, $Level, $Message, $Correlation
#SHARE    FieldTypes  string, string, string, string, string, string, string, string, string
#SHARE    Delimiter   \t
#SHARE</Extension>

#SHARE<Input SHAREPOINT_IN>
#SHARE    Module im_file
#SHARE    File "..\\<sharepoints_logs_file>\\logs"
#SHARE    <Exec>
#SHARE        # Drop header lines and empty lines
#SHARE        if $raw_event =~ /^(\xEF\xBB\xBF|Timestamp)/ drop();
#SHARE        else
#SHARE        {
#SHARE            $raw_event =~ s/ +(?=\t)//g;
#SHARE            uls_parser->parse_csv();
#SHARE            $EventTime = strptime($Timestamp, "%m/%d/%Y %H:%M:%S");
#SHARE            $Hostname = hostname_fqdn();
#SHARE            $SourceName = "SHAREPOINT-NXLOG";
#SHARE        }
#SHARE    </Exec>
#SHARE</Input>

#SHARE<Output SHAREPOINT_OUT>
#SHARE    Module om_udp
#SHARE    Host %OUTPUT_DESTINATION_ADDRESS%
#SHARE    Port %OUTPUT_DESTINATION_PORT%
#SHARE    Exec $EventTime = strftime($EventTime, '%Y-%m-%d %H:%M:%S');
#SHARE    Exec $Message = to_json(); to_syslog_bsd();
#SHARE</Output>

#SHARE<Route SP_Route>
#SHARE    Path SHAREPOINT_IN => SHAREPOINT_OUT
#SHARE</Route>
#######################################################################
####                        /SHAREPOINT-NXLOG                     #####
#######################################################################
